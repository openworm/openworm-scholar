- Programming language
  - Python

- Which API to focus on for first version?
  - Arxiv - has an actual API with error handling and some analysis already done

- Don't worry about curation yet

- and database
  - Database
    - stores abstracts, etc. long enough to analyze them
    - stores all notifications sent out -- good for later analysis of bias in
      the results due to poor keyword choice
    - Doesn't store actual papers -- for legal reasons and for smaller storage
      needs. Can store direct links if available

- Just do keyword search with no stemming or synonym matching
- Just do abstract and keyword list if available. Detect keyword list in abstract
- Create a Slack bot to publish in an OW slack channel
- Be sure to state clearly in Slack how the message was built:
  - In the message
    - Include a link to a page describing how the bot works
    - State which keywords were used to match the message
  - On the bot's 'about' page
    - Have that link + blurb about how papers are found

- Use an OpenWorm AWS server to host the bot: flexibility and we have the credits, right?
  - What policy for this kind of usage?

- Version 2 ideas 
  - A curation role and workflow 
    - Curators can add entries to the database and edit autogenerated entries
    - Retain the unfiltered keyword-based feed
    - Expand the notification model as needed to support adding notes and related papers
    - 
  - Synonym matching and stem matching : possibly on top of existing APIs
  - Basic translation features
  - Notifications from gene/anatomy databases like Wormbase and WormAtlas
- Version 3 idas
  - Visualization of usage with PyOpenWorm
    - Completes the curation workflow. Curated data goes into models and
      PyOpenWorm provides the information to annotate the models
    - Might build on existing openworm.yml in GitHub repos
  - Automated linking of 
    - From API citation crawling 
    - From custom citation crawling
- Version 4 ideas
  - Automated linking
